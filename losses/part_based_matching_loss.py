import torch
import itertools

origin_list = [0, 1, 2, 3]
tmp_list = list(itertools.permutations(origin_list))

def match_loss(features, targets):
    '''
    Proposed part-based matching loss.
    Args:
        features: K attention maps generated by 1Ã—1 convolution and Softmax
        targets: human parsing results
    '''
    mask = torch.zeros_like(features)
    for i in range(features.shape[0]):
        mask[i][0][(targets[i] == 1)] = 1
        mask[i][1][(targets[i] == 2) | (targets[i] == 5) | (targets[i] == 9)] = 1
        mask[i][2][(targets[i] == 3) | (targets[i] == 4) | (targets[i] == 6) | (targets[i] == 8)] = 1
        mask[i][3][(targets[i] == 7)] = 1

    res = -(features.clamp(min=1e-8).log() * mask).mean(dim=(2, 3)).sum(dim=1).mean(dim=0)
    return res
